// -------------------------------------------------------------
// 
// File Name: hdlsrc\edgeDetector\Smoothing_Filter.v
// Created: 2024-05-06 23:19:59
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Smoothing_Filter
// Source Path: edgeDetector/EdgeDetection/Smoothing Filter
// Hierarchy Level: 1
// Model version: 1.2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Smoothing_Filter
          (clk,
           reset,
           enb,
           In_Arrary,
           SmoothedArray);


  input   clk;
  input   reset;
  input   enb;
  input   [7:0] In_Arrary;  // uint8
  output  [7:0] SmoothedArray;  // uint8


  reg [7:0] In_Arrary_1;  // uint8
  wire [7:0] Add_out1;  // uint8
  reg [7:0] In_Arrary_2;  // uint8
  reg [7:0] In_Arrary_3;  // uint8
  wire [7:0] Add1_out1;  // uint8
  wire [7:0] Add2_out1;  // uint8
  reg [7:0] In_Arrary_4;  // uint8
  wire [7:0] Add3_out1;  // uint8


  always @(posedge clk or posedge reset)
    begin : reduced_process
      if (reset == 1'b1) begin
        In_Arrary_1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          In_Arrary_1 <= In_Arrary;
        end
      end
    end


  assign Add_out1 = In_Arrary + In_Arrary_1;


  always @(posedge clk or posedge reset)
    begin : reduced_1_process
      if (reset == 1'b1) begin
        In_Arrary_2 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          In_Arrary_2 <= In_Arrary_1;
        end
      end
    end


  always @(posedge clk or posedge reset)
    begin : reduced_2_process
      if (reset == 1'b1) begin
        In_Arrary_3 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          In_Arrary_3 <= In_Arrary_2;
        end
      end
    end


  assign Add1_out1 = In_Arrary_2 + In_Arrary_3;


  assign Add2_out1 = Add_out1 + Add1_out1;


  always @(posedge clk or posedge reset)
    begin : reduced_3_process
      if (reset == 1'b1) begin
        In_Arrary_4 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          In_Arrary_4 <= In_Arrary_3;
        end
      end
    end


  assign Add3_out1 = Add2_out1 + In_Arrary_4;


  assign SmoothedArray = Add3_out1;

endmodule  // Smoothing_Filter

